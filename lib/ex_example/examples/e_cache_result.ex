defmodule ExExample.Examples.ECacheResult do
  @moduledoc """
  I am an example module that demonstrates how to use the `defexample` macro.

  There are two examples defined: `read_data/0` and `process_data/0`.

  The `read_data/0` example generates some random data each time it is executed.

  The `process_data/0` example reads the data generated by `read_data/0` and processes it.

  If the examples are run, the result of `read_data/0` and `process_data/0` will be remembered.
  Only when any of its dependencies change, the examples will be re-executed.

  The optional `rerun?/1` and `copy/1` callbacks are defined to control when to re-run an example or
  how to copy the output of an example's previous run.
  """
  use ExExample

  @doc """
  I am an example that does some intense computations we don't want to repeat.
  """
  defexample read_data() do
    1..1000 |> Enum.shuffle() |> Enum.take(10)
  end

  @doc """
  I process some data
  """
  defexample process_data() do
    data = read_data()

    IO.puts("processing the data")
    data
  end

  @doc """
  I get called whenever an example is executed.
  I can return true if the given result must be re-evaluated, or false when the cached value can
  be used.

  I am optional.
  """
  def rerun?(_result) do
    false
  end

  @doc """
  I copy the result of a previous execution.

  I am optional.
  """
  def copy(result) do
    result
  end
end
